//
//  TradeItTicketController.h
//  TradeItTicketViewSDK
//
//  Created by Antonio Reyes on 7/2/15.
//  Copyright (c) 2015 Antonio Reyes. All rights reserved.
//

#import <Foundation/Foundation.h>
#import <UIKit/UIKit.h>
#import "TradeItTicketControllerResult.h"
#import "TradeItStyles.h"

typedef NS_ENUM(NSInteger, TradeItPresentationMode) {
    TradeItPresentationModeTrade,
    TradeItPresentationModeTradeOnly,
    TradeItPresentationModePortfolio,
    TradeItPresentationModePortfolioOnly,
    TradeItPresentationModeAuth,
    TradeItPresentationModeAccounts,
    TradeItPresentationModeBrokerCenter,
    TradeItPresentationModeNone
};


@interface TradeItTicketController : NSObject

/**
 *  Method for retrieving the TradeIt Trading Ticket publisher data
 *
 *  @param apiKey       Your unique key generated by TradeIt
 *  @param load         The method to be called once the data is returned. Passes a parameter which determines whether the Broker Center is available
 */
+ (void)initializePublisherData:(NSString *) apiKey onLoad:(void(^)(BOOL)) load;

/**
 *  Method for retrieving the TradeIt Trading Ticket publisher data
 *
 *  @param apiKey       Your unique key generated by TradeIt
 *  @param debug        Specifies whether to route requests to the TradeIt QA environment or production environment
 *  @param load         The method to be called once the data is returned. Passes a parameter which determines whether the Broker Center is available
 */
+ (void)initializePublisherData:(NSString *) apiKey withDebug:(BOOL) debug onLoad:(void(^)(BOOL)) load;

/**
 *  Method for presenting the TradeIt Trading Ticket broker center screen
 *
 *  @param apiKey       Your unique key generated by TradeIt
 *  @param view         The current UIViewController of your app, on completion we dismiss the ticket and return control back to this view
 */
+ (void)showBrokerCenterWithApiKey:(NSString *) apiKey viewController:(UIViewController *) view;

/**
 *  Method for presenting the TradeIt Trading Ticket broker center screen
 *
 *  @param apiKey       Your unique key generated by TradeIt
 *  @param view         The current UIViewController of your app, on completion we dismiss the ticket and return control back to this view
 *  @param debug        Specifies whether to route requests to the TradeIt QA environment or production environment, and whether to include the Dummy broker for testing purposes
 *  @param load         The method to be called once the data is returned. Passes a parameter which determines whether the Broker Center is available
 *  @param callback     Code block to be executed after we have returned control of the view back to you
 */
+ (void)showBrokerCenterWithApiKey:(NSString *) apiKey viewController:(UIViewController *) view withDebug:(BOOL) debug onLoad:(void(^)(BOOL)) load onCompletion:(void(^)(TradeItTicketControllerResult * result)) callback;

/**
 *  Method for presenting the TradeIt Trading Ticket accounts flow
 *
 *  @param apiKey       Your unique key generated by TradeIt
 *  @param view         The current UIViewController of your app, on completion we dismiss the ticket and return control back to this view
 */
+ (void)showAccountsWithApiKey:(NSString *) apiKey viewController:(UIViewController *) view;

/**
 *  Method for presenting the TradeIt Trading Ticket accounts flow
 *
 *  @param apiKey       Your unique key generated by TradeIt
 *  @param view         The current UIViewController of your app, on completion we dismiss the ticket and return control back to this view
 *  @param debug        Specifies whether to include the Dummy broker for testing purposes
 *  @param callback     The method to be called once the authentication is complete
 */
+ (void)showAccountsWithApiKey:(NSString *)apiKey viewController:(UIViewController *)view withDebug:(BOOL) debug onCompletion:(void(^)(TradeItTicketControllerResult * result)) callback;

/**
 *  Method for presenting the TradeIt Trading Ticket authentication flow
 *
 *  @param apiKey       Your unique key generated by TradeIt
 *  @param view         The current UIViewController of your app, on completion we dismiss the ticket and return control back to this view
 */
+ (void)showAuthenticationWithApiKey:(NSString *) apiKey viewController:(UIViewController *) view;

/**
 *  Method for presenting the TradeIt Trading Ticket authentication flow
 *
 *  @param apiKey       Your unique key generated by TradeIt
 *  @param view         The current UIViewController of your app, on completion we dismiss the ticket and return control back to this view
 *  @param debug        Specifies whether to include the Dummy broker for testing purposes
 *  @param callback     The method to be called once the authentication is complete
 */
+ (void)showAuthenticationWithApiKey:(NSString *)apiKey viewController:(UIViewController *)view withDebug:(BOOL) debug onCompletion:(void(^)(TradeItTicketControllerResult * result)) callback;

/**
 *  Simplified method for presenting the TradeIt Portfolio Flow
 *
 *  @param apiKey       Your unique key generated by TradeIt
 *  @param view         The current UIViewController of your app, on completion we dismiss the ticket and return control back to this view
 */
+(void) showPortfolioWithApiKey:(NSString *) apiKey viewController:(UIViewController *) view;

/**
 *  Simplified method for presenting the TradeIt Portfolio Flow, with an initial selected account
 *
 *  @param apiKey           Your unique key generated by TradeIt
 *  @param view             The current UIViewController of your app, on completion we dismiss the ticket and return control back to this view
 *  @param accountNumber    The account number of the selected account. You can retrieve the current linked accounts with the getLinkedAccounts class method
 */
+(void) showPortfolioWithApiKey:(NSString *) apiKey viewController:(UIViewController *) view accountNumber:(NSString *)accountNumber;

/**
 *  Simplified method for presenting *only* the TradeIt Portfolio Flow
 *
 *  @param apiKey       Your unique key generated by TradeIt
 *  @param view         The current UIViewController of your app, on completion we dismiss the ticket and return control back to this view
 */
+(void) showRestrictedPortfolioWithApiKey:(NSString *) apiKey viewController:(UIViewController *) view;

/**
 *  Simplified method for presenting *only* the TradeIt Portfolio Flow, with an initial selected account
 *
 *  @param apiKey       Your unique key generated by TradeIt
 *  @param view         The current UIViewController of your app, on completion we dismiss the ticket and return control back to this view
 *  @param view         The current UIViewController of your app, on completion we dismiss the ticket and return control back to this view
 */
+(void) showRestrictedPortfolioWithApiKey:(NSString *) apiKey viewController:(UIViewController *) view accountNumber:(NSString *)accountNumber;

/**
 *  Full method for presenting the TradeIt Portfolio Flow, allowing all options to be configured
 *
 *  @param apiKey       Your unique key generated by TradeIt
 *  @param view         The current UIViewController of your app, on completion we dismiss the ticket and return control back to this view
 *  @param debug        Specifies whether to include the Dummy broker for testing purposes
 *  @param callback     Code block to be executed after we have returned control of the view back to you
 */
+(void) showPortfolioWithApiKey:(NSString *) apiKey viewController:(UIViewController *) view withDebug:(BOOL) debug onCompletion:(void(^)(TradeItTicketControllerResult * result)) callback;

/**
 *  Method for presenting *only* the TradeIt Portfolio Flow, allowing all options to be configured
 *
 *  @param apiKey       Your unique key generated by TradeIt
 *  @param view         The current UIViewController of your app, on completion we dismiss the ticket and return control back to this view
 *  @param debug        Specifies whether to include the Dummy broker for testing purposes
 *  @param callback     Code block to be executed after we have returned control of the view back to you
 */
+(void) showRestrictedPortfolioWithApiKey:(NSString *) apiKey viewController:(UIViewController *) view withDebug:(BOOL) debug onCompletion:(void(^)(TradeItTicketControllerResult * result)) callback;

/**
 *  Simplified method for presenting the TradeIt Trading Ticket using only the required options
 *
 *  @param apiKey       Your unique key generated by TradeIt
 *  @param symbol       The street symbol of the stock or etf to be traded
 *  @param view         The current UIViewController of your app, on completion we dismiss the ticket and return control back to this view
 */
+(void) showTicketWithApiKey: (NSString *) apiKey symbol:(NSString *) symbol viewController:(UIViewController *) view;

/**
 *  Simplified method for presenting *only* the TradeIt Trading Ticket using only the required options
 *
 *  @param apiKey       Your unique key generated by TradeIt
 *  @param symbol       The street symbol of the stock or etf to be traded
 *  @param view         The current UIViewController of your app, on completion we dismiss the ticket and return control back to this view
 */
+(void) showRestrictedTicketWithApiKey: (NSString *) apiKey symbol:(NSString *) symbol viewController:(UIViewController *) view;

/**
 *  Full method for presenting the TradeIt Trading Ticket, allowing all options to be configured
 *
 *  @param apiKey       Your unique key generated by TradeIt
 *  @param symbol       The street symbol of the stock or etf to be traded
 *  @param action       Order action can be "buy", "sell", "sellShort", or "buyToCover"
 *  @param quantity     Initial quantity, if set to nil will default to 1
 *  @param view         The current UIViewController of your app, on completion we dismiss the ticket and return control back to this view
 *  @param debug        Specifies whether to include the Dummy broker for testing purposes
 *  @param callback     Code block to be executed after we have returned control of the view back to you
 */
+ (void)showTicketWithApiKey: (NSString *) apiKey symbol:(NSString *) symbol orderAction:(NSString *) action orderQuantity:(NSNumber *)quantity viewController:(UIViewController *) view withDebug:(BOOL) debug onCompletion:(void(^)(TradeItTicketControllerResult * result)) callback;

/**
 *  Full method for presenting *only* the TradeIt Trading Ticket, allowing all options to be configured
 *
 *  @param apiKey       Your unique key generated by TradeIt
 *  @param symbol       The street symbol of the stock or etf to be traded
 *  @param action       Order action can be "buy", "sell", "sellShort", or "buyToCover"
 *  @param quantity     Initial quantity, if set to nil will default to 1
 *  @param view         The current UIViewController of your app, on completion we dismiss the ticket and return control back to this view
 *  @param debug        Specifies whether to include the Dummy broker for testing purposes
 *  @param callback     Code block to be executed after we have returned control of the view back to you
 */
+ (void)showRestrictedTicketWithApiKey: (NSString *) apiKey symbol:(NSString *) symbol orderAction:(NSString *) action orderQuantity:(NSNumber *)quantity viewController:(UIViewController *) view withDebug:(BOOL) debug onCompletion:(void(^)(TradeItTicketControllerResult * result)) callback;

/**
 *  Create your own instance to have more control over defaults/callbacks, after setting all properties call showTicket
 *
 *  @param apiKey       Your unique id generated by TradeIt
 *  @param symbol       The street symbol of the stock or etf to be traded
 *  @param lastPrice    Last price of the security to be traded
 *  @param view         Presenting view, this is the current UIViewController of your app, on completion we dissmiss the ticket and return control back to this view.
 *
 *  @return TradeItTicketController
 */
- (id) initWithApiKey: (NSString *) apiKey symbol:(NSString *) symbol viewController:(UIViewController *) view;

/**
 *  The default number of shares to trade
 */
@property int quantity;

/**
 *  The default order action, can only be buy, sell, sellShort or buyToCover
 */
@property (copy) NSString* action;

/**
 *  The default order type, can only be market, limit, stopLimit, or stopMarket
 */
@property (copy) NSString* orderType;

/**
 *  The default order duration. Possible values are day or gtc.
 */
@property (copy) NSString* expiration;

/**
 *  Set this to get access to the Dummy trading brokerage for testing
 */
@property BOOL debugMode;

/**
 *  Determine how to present the ticket. Defined by TradeItPresentationMode enum
 */
@property TradeItPresentationMode presentationMode;

/**
 *  Completion block called after the ticket has been exited, immediately after returning control to init'd view controller
 */
@property (copy) void (^onCompletion)(TradeItTicketControllerResult * result);

/**
 *  The company symbol, to be displayed on the detail view ticket
 */
@property (copy) NSString * symbol;

/**
 *  The full company name, to be displayed on the detail view ticket
 */
@property (copy) NSString * companyName;

/**
 *  Styles object used to modify the default color scheme
 */
@property TradeItStyles * styles;

/**
 *  After setting all desired properties, call this method to launch the ticket
 */
-(void) showTicket;

/**
 *  Use this method to clear all linked brokers off device
 */
+(void) clearSavedData;

/**
 *  @return NSArray of accounts the user is linked with
 *  Each account contains the following fields:
 *  - accountNumber
 *  - broker
 *  - displayTitle: A truncated name, using the broker name and the last 4 digits of the account number
 *  - name
 *  - tradable: A boolean that determines whether the account is available for trading
 */
+(NSArray *) getLinkedAccounts;

/**
 *  @return NSArray of brokers the user is linked with, it will use the short names as documented in TradeItEMS Api
 *  if you're displaying this to the end user, you should pass the value(s) through getBrokerDisplayString
 */
+(NSArray *) getLinkedBrokers;

/**
 *  @param brokerIdentifier the broker short name as documented in TradeItEMS Api
 *  @return the consumer friendly version of the broker name (i.e. IB -> Interactive Brokers)
 */
+(NSString *) getBrokerDisplayString:(NSString *) brokerIdentifier;


/**
 *  @param apiKey       Your unique id generated by TradeIt
 *  @return Dictionary with the following
 *  - UserId:         The TradeIt internal userId
 *  - accountNumber   The broker account #, used by TradeItEMS Api calls
 *  - broker:         The broker
 *  - displayTitle    The title displayed within the trade ticket adn account select screens
 *  - name            The account name that the broker uses
 *  - token           The session token used by TradeItEMS Api calls
 */
+(void)getSessions: (UIViewController *) viewController withApiKey:(NSString *) apiKey onCompletion:(void(^)(NSArray * sessions)) callback;

/**
 *  @param apiKey       Your unique id generated by TradeIt
 *  @param updateInvalidSession   a session that has expired or needs re-linked, would have been returned by the getSessions call
 *  @return Dictionary with the following
 *  - UserId:         The TradeIt internal userId
 *  - accountNumber   The broker account #, used by TradeItEMS Api calls
 *  - broker:         The broker
 *  - displayTitle    The title displayed within the trade ticket adn account select screens
 *  - name            The account name that the broker uses
 *  - token           The session token used by TradeItEMS Api calls
 */
+(void)getSessions: (UIViewController *) viewController withApiKey:(NSString *) apiKey updateInvalidSession:(NSDictionary *) invalidSession onCompletion:(void(^)(NSArray * sessions)) callback;

@end
